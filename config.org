#+TITLE: Rompicapo's Emacs Config
#+AUTHOR: Rompocapo
* PACKAGE MANAGEMENT
** Setup package.el to work with MELPA.
   #+begin_src emacs-lisp
   (require 'package)
   (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages")
                           ("org" . "https://orgmode.org/elpa/")))
   (package-initialize)
   (package-refresh-contents)
   #+end_src
** Intalling use-package
  #+begin_src emacs-lisp
    (unless (package-installed-p 'use-package)
     (package-install 'use-package))
  #+end_src
* PACKAGE
** GENERAL KEYBINDINGS
   #+begin_src emacs-lisp
     (use-package general
	  :ensure t
	  :config
     (general-evil-setup t))
   #+end_src
** Evim mode
    #+begin_src emacs-lisp
    (use-package evil
        :ensure t ;; install evil if not installed
        :init 
        (setq evil-want-integration t)
        (setq evil-want-keybinding nil)
        (setq evil-vsplit-window-right t)
        (setq evil-split-window-below t)
        (evil-mode))
    (use-package evil-collection
        :after evil
        :ensure t
        :config 
        (evil-collection-init))
    #+end_src
** Which key
   #+begin_src emacs-lisp
     (use-package which-key
         :ensure t)
     (which-key-mode)
   #+end_src
** Doom modline
   #+begin_src emacs-lisp
   (use-package doom-modeline
              :ensure t)
   (doom-modeline-mode 1)
   (display-time-mode 1)
   #+end_src
** All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons )
#+end_src

** Org-bullet
   #+begin_src emacs-lisp
   (use-package org-bullets
       :ensure t
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+end_src 
** File manage (DIRED) 
#+begin_src emacs-lisp
    (use-package all-the-icons-dired
     :ensure t)
    (use-package dired
    :ensure nil)

  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
		 "d d" '(dired :which-key "Open dired")
		 "d j" '(dired-jump :which-key "Dired jump to current")
		 "d p" '(peep-dired :which-key "Peep-dired"))

  (with-eval-after-load 'dired
    ;;(define-key dired-mode-map (kbd "M-p") 'peep-dired)
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file))

  (add-hook 'peep-dired-hook 'evil-normalize-keymaps)
  ;; Get file icons in dired
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  ;; With dired-open plugin, you can launch external programs for certain extensions
  ;; For example, I set all .png files to open in 'sxiv' and all .mp4 files to open in 'mpv'
  (setq dired-open-extensions '(("gif" . "sxiv")
				("jpg" . "sxiv")
				("png" . "sxiv")
				("mkv" . "mpv")
				("mp4" . "mpv")))
#+end_src

** vterm
#+begin_src emacs-lisp
(use-package vterm
    :ensure t)
#+end_src
** ivy
#+begin_src emacs-lisp
(use-package ivy
:ensure t
:config
(ivy-mode 1))
#+end_src
** Rainbow Delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :init
  (progn
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+end_src
** MegaGit
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src
** authotemer
#+begin_src emacs-lisp
(use-package autothemer
  :ensure t)

#+end_src

* SYNTAX HIGHLIGHTING
** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
    :ensure t)
#+end_src
** markdown
#+begin_src emacs-lisp
(use-package markdown-mode
    :ensure t)
#+end_src
* KEYBINDING
** General keybinding 
#+begin_src emacs-lisp
(nvmap :keymaps 'override :prefix "SPC"
       "SPC"   '(counsel-M-x :which-key "M-x")
       "h r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload emacs config")
       "t t"   '(toggle-truncate-lines :which-key "Toggle truncate lines"))
#+end_src
** Split and window controls
#+begin_src emacs-lisp
(winner-mode 1)
(nvmap :prefix "SPC"
       ;; Window splits
       "w c"   '(evil-window-delete :which-key "Close window")
       "w n"   '(evil-window-new :which-key "New window")
       "w s"   '(evil-window-split :which-key "Horizontal split window")
       "w v"   '(evil-window-vsplit :which-key "Vertical split window")
       ;; Window motions
       "w h"   '(evil-window-left :which-key "Window left")
       "w j"   '(evil-window-down :which-key "Window down")
       "w k"   '(evil-window-up :which-key "Window up")
       "w l"   '(evil-window-right :which-key "Window right")
       "w w"   '(evil-window-next :which-key "Goto next window")
       ;; winner mode
       "w <left>"  '(winner-undo :which-key "Winner undo")
       "w <right>" '(winner-redo :which-key "Winner redo"))
#+end_src
** File-related Keybindings
#+begin_src emacs-lisp
  (nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
	 "."     '(find-file :which-key "Find file")
	 "f r"   '(counsel-recentf :which-key "Recent files")
	 "f s"   '(save-buffer :which-key "Save file")
	 "f u"   '(sudo-edit-find-file :which-key "Sudo find file")
	 "f y"   '(dt/show-and-copy-buffer-path :which-key "Yank file path")
	 "f C"   '(copy-file :which-key "Copy file")
	 "f D"   '(delete-file :which-key "Delete file")
	 "f R"   '(rename-file :which-key "Rename file")
	 "f S"   '(write-file :which-key "Save file as...")
	 "f U"   '(sudo-edit :which-key "Sudo edit file"))
#+end_src
** Zooming In and Out
   #+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
   #+end_src
** org-to-pdf
#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "e p"   '(org-export-dispatch :which-key "open export dispatch"))
#+end_src
** Magit
#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "g g"   '(magit-status :which-key "open magit status"))
#+end_src
** tabs
#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "t n"   '(tab-new :which-key "open new tab")
       "t l"   '(tab-next :which-key "next tabs")
       "t h"   '(tab-previous :which-key "previus tab")
       "t k"   '(tab-close :which-key "close current tab"))
#+end_src
** org-agenda
<<<<<<< HEAD
=======
#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "o a"   '(org-agenda :which-key "close current tab")
       "a t"   '(org-todo-list :which-key "close current tab"))
#+end_src

>>>>>>> b6d72ac (adding custom script for emacs)
** docVewe
#+begin_src emacs-lisp
(nvmap :states '(normal visual) :keymaps 'override :prefix "SPC"
       "p h"   '(doc-view-previous-page :which-key "open new tab")
       "p l"   '(doc-view-next-page :which-key "close current tab"))
#+end_src
* THEME
  #+begin_src emacs-lisp
  (use-package doom-themes
     :ensure t)
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-one t) 
  #+end_src 

* FONTS
  #+begin_src emacs-lisp
    (set-face-attribute 'default nil
	    :font "Mononoki Nerd Font 12"
	    :weight 'medium)
    (set-face-attribute 'variable-pitch nil
	    :font "Ubuntu Nerd Font 12"
	    :weight 'medium)
    (set-face-attribute 'fixed-pitch nil
	    :font "Mononoki Nerd Font 12"
	    :weight 'medium)
    (add-to-list 'default-frame-alist '(font . "Mononoki Nerd Font 12"))
#+end_src

* GRAPHICAL USER INTERFACE SETTINGS
** Disable tool bar,menu and Scrollbar
  #+begin_src emacs-lisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
  #+end_src

** Display line Numbers and Truncated Lines
   #+begin_src emacs-lisp
   (global-display-line-numbers-mode 1)
   (global-visual-line-mode t)
   #+end_src

** Disable numbers on some buffer
#+begin_src emacs-lisp
(dolist (mode '(term-mode-hook
                org-mode-hook
                eshell-mode-hook
                dashboard-mode-hook))
   (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

* DASHBOARD
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init      ;; tweak dashboard config before loading it
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
			  (agenda . 5 )))
  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))
#+end_src
* ORG-AGENDA
   #+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/Org/"
      org-agenda-files '("~/Org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " â–¼ "
      org-log-done 'time
      org-journal-dir "~/Org/journal/"
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%Y-%m-%d.org"
      org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)
   #+end_src
   
* CUSTOM SCRIPT
** Term right split screen
#+begin_src emacs-lisp
(defun split-term-right()
(interactive)
(split-window-right)
(other-window -1)
(term "/bin/bash"))

(nvmap :keymaps 'override :prefix "SPC"
       "s t"   '(split-term-right :which-key "spown a term in a right spli"))
#+end_src

** Ibuffer right split screen
#+begin_src emacs-lisp
(defun split-ibuffer-right()
(interactive)
(split-window-right)
(other-window -1)
(ibuffer))

(nvmap :keymaps 'override :prefix "SPC"
       "s b"   '(split-ibuffer-right :which-key "spown a ibuffer in a right spli"))
#+end_src
** Dired right split screen
#+begin_src emacs-lisp
(defun split-dired-right()
(interactive)
(split-window-right)
(other-window -1)
(dired-jump))

(nvmap :keymaps 'override :prefix "SPC"
       "s d"   '(split-dired-right :which-key "spown a ibuffer in a right spli"))
#+end_src
** Open agenda file in right split screen
#+begin_src emacs-lisp
(defun open-agenda-file()
(interactive)
(split-window-right)
(other-window -1)
(find-file "~/Org/agenda.org"))

(nvmap :keymaps 'override :prefix "SPC"
       "a f"   '(open-agenda-file :which-key "Spown a org agebda file in a right spli"))

#+end_src
** eww in right split screen
#+begin_src emacs-lisp
(defun split-dired-right()
(interactive)
(split-window-right)
(other-window -1)
(eww "https://www.google.com"))

(nvmap :keymaps 'override :prefix "SPC"
       "s b"   '(split-dired-right :which-key "spown a eww in a right spli"))

#+end_src
* EMACS SETTINGS
** Disable file Backup
#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src
